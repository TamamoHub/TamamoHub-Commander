import pyautogui
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from ..core.logger import log_to_console, log_error

class MouseControl:
    STEP = 20  # –ö—Ä–æ–∫ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –º–∏—à—ñ –≤ –ø—ñ–∫—Å–µ–ª—è—Ö
    SCROLL_STEP = 10  # –ë–∞–∑–æ–≤–∏–π –∫—Ä–æ–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏

    @staticmethod
    def create_mouse_keyboard():
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∫–µ—Ä—É–≤–∞–Ω–Ω—è –º–∏—à–µ—é"""
        try:
            log_to_console("Creating mouse control keyboard")
            keyboard = InlineKeyboardMarkup()
            
            # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
            keyboard.row(
                InlineKeyboardButton("‚ÜñÔ∏è", callback_data="mouse:move_up_left"),
                InlineKeyboardButton("‚¨ÜÔ∏è", callback_data="mouse:move_up"),
                InlineKeyboardButton("‚ÜóÔ∏è", callback_data="mouse:move_up_right")
            )
            keyboard.row(
                InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="mouse:move_left"),
                InlineKeyboardButton("‚Ä¢", callback_data="mouse:click"),
                InlineKeyboardButton("‚û°Ô∏è", callback_data="mouse:move_right")
            )
            keyboard.row(
                InlineKeyboardButton("‚ÜôÔ∏è", callback_data="mouse:move_down_left"),
                InlineKeyboardButton("‚¨áÔ∏è", callback_data="mouse:move_down"),
                InlineKeyboardButton("‚ÜòÔ∏è", callback_data="mouse:move_down_right")
            )
            
            # –ö–Ω–æ–ø–∫–∏ –∫–ª—ñ–∫—ñ–≤
            keyboard.row(
                InlineKeyboardButton("üñ±Ô∏è –õ–ö–ú", callback_data="mouse:left_click"),
                InlineKeyboardButton("üñ±Ô∏è –ü–ö–ú", callback_data="mouse:right_click"),
                InlineKeyboardButton("üñ±Ô∏è 2x–õ–ö–ú", callback_data="mouse:double_click")
            )
            
            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
            keyboard.row(
                InlineKeyboardButton("üîÑ‚¨ÜÔ∏è", callback_data="mouse:scroll_up_fast"),
                InlineKeyboardButton("üîº", callback_data="mouse:scroll_up"),
                InlineKeyboardButton("‚ñ≤", callback_data="mouse:scroll_up_slow")
            )
            keyboard.row(
                InlineKeyboardButton("üîÑ‚¨áÔ∏è", callback_data="mouse:scroll_down_fast"),
                InlineKeyboardButton("üîΩ", callback_data="mouse:scroll_down"),
                InlineKeyboardButton("‚ñº", callback_data="mouse:scroll_down_slow")
            )
            
            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
            keyboard.row(
                InlineKeyboardButton("‚ö° –®–≤–∏–¥–∫—ñ—Å—Ç—å", callback_data="mouse:speed"),
                InlineKeyboardButton("üìç –¶–µ–Ω—Ç—Ä", callback_data="mouse:center")
            )
            keyboard.row(
                InlineKeyboardButton("üéØ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏", callback_data="mouse:position")
            )
            
            # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
            keyboard.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_pc"))
            
            log_to_console("Mouse control keyboard created successfully")
            return keyboard
        except Exception as e:
            log_error("Error creating mouse control keyboard", e)
            return InlineKeyboardMarkup()

    @staticmethod
    def create_speed_keyboard():
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤–∏–±–æ—Ä—É —à–≤–∏–¥–∫–æ—Å—Ç—ñ"""
        try:
            log_to_console("Creating mouse speed selection keyboard")
            keyboard = InlineKeyboardMarkup()
            keyboard.row(
                InlineKeyboardButton("üêå –ü–æ–≤—ñ–ª—å–Ω–æ", callback_data="mouse:set_speed:10"),
                InlineKeyboardButton("üö∂ –°–µ—Ä–µ–¥–Ω—è", callback_data="mouse:set_speed:20"),
                InlineKeyboardButton("üèÉ –®–≤–∏–¥–∫–æ", callback_data="mouse:set_speed:40")
            )
            keyboard.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="mouse:control"))
            log_to_console("Mouse speed keyboard created successfully")
            return keyboard
        except Exception as e:
            log_error("Error creating mouse speed keyboard", e)
            return InlineKeyboardMarkup()

    @staticmethod
    def move_mouse(direction):
        """–ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –º–∏—à—É"""
        try:
            x, y = 0, 0
            step = MouseControl.STEP
            
            if 'up' in direction:
                y -= step
            if 'down' in direction:
                y += step
            if 'left' in direction:
                x -= step
            if 'right' in direction:
                x += step
                
            current_x, current_y = pyautogui.position()
            log_to_console(f"Moving mouse from ({current_x}, {current_y}) by ({x}, {y})")
            pyautogui.moveRel(x, y)
            new_x, new_y = pyautogui.position()
            log_to_console(f"Mouse moved to new position: ({new_x}, {new_y})")
            return f"–ú–∏—à–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–∞ –Ω–∞ {x}, {y} –ø—ñ–∫—Å–µ–ª—ñ–≤"
        except Exception as e:
            log_error(f"Error moving mouse in direction: {direction}", e)
            return f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –º–∏—à—ñ: {str(e)}"

    @staticmethod
    def set_speed(speed):
        """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —à–≤–∏–¥–∫—ñ—Å—Ç—å –º–∏—à—ñ"""
        try:
            log_to_console(f"Setting mouse speed to: {speed}")
            MouseControl.STEP = speed
            log_to_console(f"Mouse speed set successfully to {speed}")
            return f"–®–≤–∏–¥–∫—ñ—Å—Ç—å –º–∏—à—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {speed} –ø—ñ–∫—Å–µ–ª—ñ–≤"
        except Exception as e:
            log_error(f"Error setting mouse speed to {speed}", e)
            return f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ: {str(e)}"

    @staticmethod
    def get_position():
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –º–∏—à—ñ"""
        try:
            x, y = pyautogui.position()
            log_to_console(f"Getting mouse position: ({x}, {y})")
            return f"–ü–æ—Ç–æ—á–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: X={x}, Y={y}"
        except Exception as e:
            log_error("Error getting mouse position", e)
            return "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"

    @staticmethod
    def center_mouse():
        """–ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –º–∏—à—É –≤ —Ü–µ–Ω—Ç—Ä –µ–∫—Ä–∞–Ω—É"""
        try:
            screen_width, screen_height = pyautogui.size()
            center_x, center_y = screen_width // 2, screen_height // 2
            log_to_console(f"Centering mouse to ({center_x}, {center_y})")
            pyautogui.moveTo(center_x, center_y)
            log_to_console("Mouse centered successfully")
            return "–ú–∏—à–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–∞ –≤ —Ü–µ–Ω—Ç—Ä –µ–∫—Ä–∞–Ω—É"
        except Exception as e:
            log_error("Error centering mouse", e)
            return "–ü–æ–º–∏–ª–∫–∞ —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –º–∏—à—ñ"

    @staticmethod
    def execute_command(command, *args):
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –º–∏—à—ñ"""
        try:
            log_to_console(f"Executing mouse command: {command}")
            
            if command.startswith("move_"):
                return MouseControl.move_mouse(command.replace("move_", ""))
                
            elif command == "click":
                log_to_console("Performing mouse click")
                pyautogui.click()
                return "–ö–ª—ñ–∫"
                
            elif command == "left_click":
                log_to_console("Performing left mouse click")
                pyautogui.click(button='left')
                return "–õ—ñ–≤–∏–π –∫–ª—ñ–∫"
                
            elif command == "right_click":
                log_to_console("Performing right mouse click")
                pyautogui.click(button='right')
                return "–ü—Ä–∞–≤–∏–π –∫–ª—ñ–∫"
                
            elif command == "double_click":
                log_to_console("Performing double click")
                pyautogui.doubleClick()
                return "–ü–æ–¥–≤—ñ–π–Ω–∏–π –∫–ª—ñ–∫"
                
            elif command.startswith("scroll_"):
                direction = "up" if "up" in command else "down"
                speed = "fast" if "fast" in command else "slow" if "slow" in command else "normal"
                multiplier = 3 if speed == "fast" else 0.5 if speed == "slow" else 1
                scroll_amount = MouseControl.SCROLL_STEP * multiplier * (1 if direction == "up" else -1)
                
                log_to_console(f"Scrolling {direction} with speed {speed} (amount: {scroll_amount})")
                pyautogui.scroll(int(scroll_amount))
                return f"{'–®–≤–∏–¥–∫–∞' if speed == 'fast' else '–ü–æ–≤—ñ–ª—å–Ω–∞' if speed == 'slow' else ''} –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ {direction}"
                
            elif command == "center":
                return MouseControl.center_mouse()
                
            elif command == "position":
                return MouseControl.get_position()
                
            elif command == "set_speed":
                return MouseControl.set_speed(int(args[0]))
            
            log_to_console(f"Unknown mouse command received: {command}", "WARNING")
            return "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞"
        except Exception as e:
            log_error(f"Error executing mouse command: {command}", e)
            return f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: {str(e)}" 
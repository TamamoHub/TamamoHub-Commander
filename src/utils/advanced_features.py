import os
import pyttsx3
import webbrowser
import sympy
from googletrans import Translator
from gtts import gTTS
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# –†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –∑–∞–º—ñ–Ω–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤–∏–º–æ–≤–∏
UKRAINIAN_REPLACEMENTS = {
    '–ø—Ä–∏–≤—ñ—Ç': '–ø—Ä–∏–≤+—ñ—Ç',
    '–¥–æ–±—Ä–∏–π': '–¥+–æ–±—Ä–∏–π',
    '–¥–µ–Ω—å': '–¥+–µ–Ω—å',
    '–¥—è–∫—É—é': '–¥—è–∫+—É—é',
    # –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ —Å–ª–æ–≤–∞ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
}

def improve_pronunciation(text):
    """
    –ü–æ–∫—Ä–∞—â—É—î –≤–∏–º–æ–≤—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Å–ª—ñ–≤ —à–ª—è—Ö–æ–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–∞–≥–æ–ª–æ—Å—ñ–≤
    —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
    """
    for word, replacement in UKRAINIAN_REPLACEMENTS.items():
        text = text.replace(word, replacement)
    return text

def get_best_ukrainian_voice(engine):
    """
    –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫—Ä–∞—â–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –≥–æ–ª–æ—Å
    """
    voices = engine.getProperty('voices')
    
    # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏–π —Å–ø–∏—Å–æ–∫ –º–æ–≤
    priorities = ['ukrainian', 'ukr', 'rus', 'russian']
    
    for priority in priorities:
        for voice in voices:
            if priority in voice.name.lower():
                return voice
    
    # –Ø–∫—â–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –≥–æ–ª–æ—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–µ—Ä—à–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π
    return voices[0] if voices else None

class AdvancedFeatures:
    @staticmethod
    def create_menu_keyboard():
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —Ä–æ–∑—à–∏—Ä–µ–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π"""
        keyboard = InlineKeyboardMarkup()
        keyboard.row(
            InlineKeyboardButton("üìù –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç", callback_data="advanced:text"),
            InlineKeyboardButton("üó£Ô∏è –û–∑–≤—É—á–∏—Ç–∏ —Ç–µ–∫—Å—Ç", callback_data="advanced:tts")
        )
        keyboard.row(
            InlineKeyboardButton("üé§ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="advanced:calc"),
            InlineKeyboardButton("üåê –í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è", callback_data="advanced:url")
        )
        keyboard.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_pc"))
        return keyboard

    @staticmethod
    def send_text_to_pc(text):
        """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –ü–ö —á–µ—Ä–µ–∑ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É"""
        try:
            import pyperclip
            pyperclip.copy(text)
            return "–¢–µ–∫—Å—Ç —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É"
        except Exception as e:
            return f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É: {str(e)}"

    @staticmethod
    def text_to_speech(text, lang='uk'):
        """–û–∑–≤—É—á–∏—Ç–∏ —Ç–µ–∫—Å—Ç"""
        try:
            # –û–∑–≤—É—á—É–≤–∞–Ω–Ω—è –Ω–∞ –ü–ö
            engine = pyttsx3.init()
            
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
            engine.setProperty('volume', 1.0)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≥—É—á–Ω—ñ—Å—Ç—å
            engine.setProperty('rate', 150)    # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å
            
            # –®—É–∫–∞—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –≥–æ–ª–æ—Å
            voices = engine.getProperty('voices')
            ukrainian_voice = None
            for voice in voices:
                if 'ukrainian' in voice.name.lower() or 'ukr' in voice.name.lower():
                    ukrainian_voice = voice
                    break
            
            if ukrainian_voice:
                engine.setProperty('voice', ukrainian_voice.id)
            
            # –ü–æ–ø–µ—Ä–µ–¥–Ω—è –æ–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –¥–ª—è –∫—Ä–∞—â–æ—ó –≤–∏–º–æ–≤–∏
            processed_text = text
            replacements = {
                '—ñ': '–∏',  # –ó–∞–º—ñ–Ω–∞ –¥–ª—è –∫—Ä–∞—â–æ—ó –≤–∏–º–æ–≤–∏
                '—ó': '–π—ñ',
                '—î': '–π–µ',
                '—â': '—à—á',
                '—è': '–π–∞',
                '—é': '–π—É',
                '“ë': '–≥',
            }
            
            for old, new in replacements.items():
                processed_text = processed_text.replace(old, new)
            
            # –û–∑–≤—É—á—É—î–º–æ —Ç–µ–∫—Å—Ç
            engine.say(processed_text)
            engine.runAndWait()
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ—Ñ–∞–π–ª—É –¥–ª—è Telegram
            tts = gTTS(text=text, lang=lang)
            filename = "speech.mp3"
            tts.save(filename)
            return filename
        except Exception as e:
            return f"–ü–æ–º–∏–ª–∫–∞ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è: {str(e)}"

    @staticmethod
    def solve_math(expression):
        """–†–æ–∑–≤'—è–∑–∞—Ç–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏—Ä–∞–∑"""
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ sympy –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω—å
            result = sympy.sympify(expression)
            return f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
        except Exception as e:
            return f"–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è: {str(e)}"

    @staticmethod
    def open_url(url):
        """–í—ñ–¥–∫—Ä–∏—Ç–∏ URL –≤ –±—Ä–∞—É–∑–µ—Ä—ñ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î–º–æ URL
            if not url.startswith(('http://', 'https://')):
                url = 'http://' + url
            webbrowser.open(url)
            return f"URL –≤—ñ–¥–∫—Ä–∏—Ç–æ: {url}"
        except Exception as e:
            return f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è URL: {str(e)}" 
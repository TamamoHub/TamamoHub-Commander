import os
import subprocess
import pyautogui
from datetime import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from ..core.logger import log_to_console, log_error

class WindowsCommands:
    @staticmethod
    def create_commands_keyboard():
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏ Windows"""
        try:
            log_to_console("Creating Windows commands keyboard")
            keyboard = InlineKeyboardMarkup(row_width=2)
            
            # –°–∏—Å—Ç–µ–º–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
            keyboard.add(
                InlineKeyboardButton("üîå –í–∏–º–∫–Ω—É—Ç–∏ –ü–ö", callback_data="wincmd:shutdown"),
                InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏", callback_data="wincmd:reboot")
            )
            keyboard.add(
                InlineKeyboardButton("üõë –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –≤–∏–º–∫–Ω–µ–Ω–Ω—è", callback_data="wincmd:abort_shutdown"),
                InlineKeyboardButton("üîí –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data="wincmd:lock")
            )
            keyboard.add(
                InlineKeyboardButton("üò¥ –°–ø–ª—è—á–∏–π —Ä–µ–∂–∏–º", callback_data="wincmd:sleep"),
                InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É", callback_data="wincmd:clear_bin")
            )
            
            # –í—ñ–∫–Ω–∞ —Ç–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            keyboard.add(
                InlineKeyboardButton("‚¨áÔ∏è –ó–≥–æ—Ä–Ω—É—Ç–∏ –≤—Å–µ", callback_data="wincmd:minimize_all"),
                InlineKeyboardButton("‚ÜôÔ∏è –ó–≥–æ—Ä–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ", callback_data="wincmd:minimize_current")
            )
            keyboard.add(
                InlineKeyboardButton("‚ÜóÔ∏è –ù–∞ –≤–µ—Å—å –µ–∫—Ä–∞–Ω", callback_data="wincmd:maximize"),
                InlineKeyboardButton("üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç", callback_data="wincmd:screenshot")
            )
            
            # –°–∏—Å—Ç–µ–º–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏
            keyboard.add(
                InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="wincmd:settings"),
                InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="wincmd:close_settings")
            )
            keyboard.add(
                InlineKeyboardButton("üìã –ë—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É", callback_data="wincmd:clipboard"),
                InlineKeyboardButton("üìä –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á", callback_data="wincmd:task_manager")
            )
            keyboard.add(
                InlineKeyboardButton("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", callback_data="wincmd:downloads"),
                InlineKeyboardButton("üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É", callback_data="wincmd:language")
            )

            # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
            keyboard.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_pc"))
            
            log_to_console("Windows commands keyboard created successfully")
            return keyboard
        except Exception as e:
            log_error("Error creating Windows commands keyboard", e)
            return InlineKeyboardMarkup()

    @staticmethod
    def execute_command(command):
        """–í–∏–∫–æ–Ω–∞—Ç–∏ Windows –∫–æ–º–∞–Ω–¥—É"""
        try:
            log_to_console(f"Executing Windows command: {command}")
            
            if command == "shutdown":
                log_to_console("Initiating system shutdown")
                os.system("shutdown /s /t 10")
                return "–ü–ö –±—É–¥–µ –≤–∏–º–∫–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥"
            
            elif command == "reboot":
                log_to_console("Initiating system reboot")
                os.system("shutdown /r /t 10")
                return "–ü–ö –±—É–¥–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥"
            
            elif command == "abort_shutdown":
                log_to_console("Aborting system shutdown")
                os.system("shutdown /a")
                return "–í–∏–º–∫–Ω–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ"
            
            elif command == "lock":
                log_to_console("Locking workstation")
                os.system("rundll32.exe user32.dll,LockWorkStation")
                return "–ü–ö –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ"
            
            elif command == "sleep":
                log_to_console("Putting system to sleep")
                os.system("rundll32.exe powrprof.dll,SetSuspendState 0,1,0")
                return "–ü–ö –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Å–ø–ª—è—á–∏–π —Ä–µ–∂–∏–º"
            
            elif command == "clear_bin":
                log_to_console("Clearing recycle bin")
                os.system("rd /s /q %systemdrive%\$Recycle.bin")
                return "–ö–æ—Ä–∑–∏–Ω—É –æ—á–∏—â–µ–Ω–æ"
            
            elif command == "minimize_all":
                log_to_console("Minimizing all windows")
                pyautogui.hotkey('win', 'd')
                return "–í—Å—ñ –≤—ñ–∫–Ω–∞ –∑–≥–æ—Ä–Ω—É—Ç–æ"
            
            elif command == "minimize_current":
                log_to_console("Minimizing current window")
                pyautogui.hotkey('win', 'down')
                return "–ü–æ—Ç–æ—á–Ω–µ –≤—ñ–∫–Ω–æ –∑–≥–æ—Ä–Ω—É—Ç–æ"
            
            elif command == "maximize":
                log_to_console("Maximizing current window")
                pyautogui.hotkey('win', 'up')
                return "–ü–æ—Ç–æ—á–Ω–µ –≤—ñ–∫–Ω–æ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–æ"
            
            elif command == "screenshot":
                log_to_console("Taking screenshot")
                screenshot = pyautogui.screenshot()
                filename = f"screenshot_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
                screenshot.save(filename)
                log_to_console(f"Screenshot saved as: {filename}")
                return filename
            
            elif command == "settings":
                log_to_console("Opening Windows settings")
                os.system("start ms-settings:")
                return "–í—ñ–¥–∫—Ä–∏—Ç–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Windows"
            
            elif command == "close_settings":
                log_to_console("Closing Windows settings")
                os.system("taskkill /f /im SystemSettings.exe")
                return "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ"
            
            elif command == "clipboard":
                log_to_console("Opening clipboard history")
                pyautogui.hotkey('win', 'v')
                return "–í—ñ–¥–∫—Ä–∏—Ç–æ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É"
            
            elif command == "task_manager":
                log_to_console("Opening task manager")
                os.system("taskmgr")
                return "–í—ñ–¥–∫—Ä–∏—Ç–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á"
            
            elif command == "downloads":
                log_to_console("Opening downloads folder")
                os.startfile(os.path.expanduser("~\\Downloads"))
                return "–í—ñ–¥–∫—Ä–∏—Ç–æ –ø–∞–ø–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å"
            
            elif command == "language":
                log_to_console("Opening language switcher")
                pyautogui.hotkey('win', 'space')
                return "–í—ñ–¥–∫—Ä–∏—Ç–æ –º–µ–Ω—é –∑–º—ñ–Ω–∏ –º–æ–≤–∏"
            
            log_to_console("Command executed successfully")
            return "–ö–æ–º–∞–Ω–¥—É –≤–∏–∫–æ–Ω–∞–Ω–æ"
        except Exception as e:
            log_error(f"Error executing Windows command: {command}", e)
            return f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: {str(e)}" 
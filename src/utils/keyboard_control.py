import pyautogui
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from ..core.logger import log_to_console, log_error

class KeyboardControl:
    @staticmethod
    def create_keyboard_menu():
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏"""
        try:
            log_to_console("Creating keyboard control main menu")
            keyboard = InlineKeyboardMarkup()
            keyboard.row(
                InlineKeyboardButton("‚å®Ô∏è –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –∫–ª–∞–≤—ñ—à—ñ", callback_data="keyboard:function_keys"),
                InlineKeyboardButton(" –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç", callback_data="keyboard:input_text")
            )
            keyboard.row(
                InlineKeyboardButton("üéÆ –ì–∞—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à—ñ", callback_data="keyboard:hotkeys"),
                InlineKeyboardButton("‚ö° –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ", callback_data="keyboard:special")
            )
            keyboard.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_pc"))
            log_to_console("Keyboard control main menu created successfully")
            return keyboard
        except Exception as e:
            log_error("Error creating keyboard control menu", e)
            return InlineKeyboardMarkup()

    @staticmethod
    def create_function_keys_keyboard():
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö –∫–ª–∞–≤—ñ—à"""
        try:
            log_to_console("Creating function keys keyboard")
            keyboard = InlineKeyboardMarkup()
            # F1-F12
            for i in range(1, 13, 3):
                keyboard.row(
                    *[InlineKeyboardButton(f"F{j}", callback_data=f"keyboard:press:f{j}") 
                      for j in range(i, min(i+3, 13))]
                )
            # –ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∫–ª–∞–≤—ñ—à—ñ
            keyboard.row(
                InlineKeyboardButton("Home", callback_data="keyboard:press:home"),
                InlineKeyboardButton("End", callback_data="keyboard:press:end"),
                InlineKeyboardButton("PgUp", callback_data="keyboard:press:pageup")
            )
            keyboard.row(
                InlineKeyboardButton("Insert", callback_data="keyboard:press:insert"),
                InlineKeyboardButton("Delete", callback_data="keyboard:press:delete"),
                InlineKeyboardButton("PgDn", callback_data="keyboard:press:pagedown")
            )
            keyboard.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="keyboard:menu"))
            log_to_console("Function keys keyboard created successfully")
            return keyboard
        except Exception as e:
            log_error("Error creating function keys keyboard", e)
            return InlineKeyboardMarkup()

    @staticmethod
    def create_hotkeys_keyboard():
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≥–∞—Ä—è—á–∏—Ö –∫–ª–∞–≤—ñ—à"""
        try:
            log_to_console("Creating hotkeys keyboard")
            keyboard = InlineKeyboardMarkup()
            keyboard.row(
                InlineKeyboardButton("üìã Copy", callback_data="keyboard:hotkey:ctrl+c"),
                InlineKeyboardButton("üìã Paste", callback_data="keyboard:hotkey:ctrl+v"),
                InlineKeyboardButton("‚úÇÔ∏è Cut", callback_data="keyboard:hotkey:ctrl+x")
            )
            keyboard.row(
                InlineKeyboardButton("‚Ü©Ô∏è Undo", callback_data="keyboard:hotkey:ctrl+z"),
                InlineKeyboardButton("‚Ü™Ô∏è Redo", callback_data="keyboard:hotkey:ctrl+y"),
                InlineKeyboardButton("üíæ Save", callback_data="keyboard:hotkey:ctrl+s")
            )
            keyboard.row(
                InlineKeyboardButton("üîç Find", callback_data="keyboard:hotkey:ctrl+f"),
                InlineKeyboardButton("üìù Select All", callback_data="keyboard:hotkey:ctrl+a"),
                InlineKeyboardButton("üñ®Ô∏è Print", callback_data="keyboard:hotkey:ctrl+p")
            )
            keyboard.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="keyboard:menu"))
            log_to_console("Hotkeys keyboard created successfully")
            return keyboard
        except Exception as e:
            log_error("Error creating hotkeys keyboard", e)
            return InlineKeyboardMarkup()

    @staticmethod
    def create_special_keyboard():
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫–ª–∞–≤—ñ—à"""
        try:
            log_to_console("Creating special keys keyboard")
            keyboard = InlineKeyboardMarkup()
            keyboard.row(
                InlineKeyboardButton("‚èé Enter", callback_data="keyboard:press:enter"),
                InlineKeyboardButton("‚å´ Backspace", callback_data="keyboard:press:backspace"),
                InlineKeyboardButton("‚éµ Space", callback_data="keyboard:press:space")
            )
            keyboard.row(
                InlineKeyboardButton("‚á• Tab", callback_data="keyboard:press:tab"),
                InlineKeyboardButton("‚éã Esc", callback_data="keyboard:press:esc"),
                InlineKeyboardButton("‚á™ Caps", callback_data="keyboard:press:capslock")
            )
            keyboard.row(
                InlineKeyboardButton("Alt", callback_data="keyboard:press:alt"),
                InlineKeyboardButton("Ctrl", callback_data="keyboard:press:ctrl"),
                InlineKeyboardButton("Shift", callback_data="keyboard:press:shift")
            )
            keyboard.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="keyboard:menu"))
            log_to_console("Special keys keyboard created successfully")
            return keyboard
        except Exception as e:
            log_error("Error creating special keys keyboard", e)
            return InlineKeyboardMarkup()

    @staticmethod
    def execute_command(command, *args):
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏"""
        try:
            if command == "press":
                key = args[0]
                log_to_console(f"Executing keyboard press: {key.upper()}")
                pyautogui.press(key)
                log_to_console(f"Successfully pressed key: {key.upper()}")
                return f"–ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–ª–∞–≤—ñ—à—É {key.upper()}"
                
            elif command == "hotkey":
                keys = args[0].split('+')
                log_to_console(f"Executing hotkey combination: {'+'.join(keys).upper()}")
                pyautogui.hotkey(*keys)
                log_to_console(f"Successfully executed hotkey: {'+'.join(keys).upper()}")
                return f"–í–∏–∫–æ–Ω–∞–Ω–æ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é {'+'.join(keys).upper()}"
                
            elif command == "type":
                text = args[0]
                log_to_console(f"Typing text: {text[:50]}...")
                pyautogui.write(text)
                log_to_console("Text input completed successfully")
                return f"–í–≤–µ–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç: {text}"
            
            log_to_console(f"Unknown keyboard command received: {command}", "WARNING")
            return "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞"
        except Exception as e:
            log_error(f"Error executing keyboard command: {command}", e)
            return f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: {str(e)}"
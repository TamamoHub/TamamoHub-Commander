import psutil
import platform
import GPUtil
from datetime import datetime

def get_size(bytes):
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î –±–∞–π—Ç–∏ –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç"""
    for unit in ['', 'K', 'M', 'G', 'T', 'P']:
        if bytes < 1024:
            return f"{bytes:.2f}{unit}B"
        bytes /= 1024

def get_system_info():
    try:
        info = []
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É
        info.append("üñ•Ô∏è *–°–∏—Å—Ç–µ–º–∞:*")
        info.append(f"‚Ä¢ OS: `{platform.system()} {platform.version()}`")
        info.append(f"‚Ä¢ –ü—Ä–æ—Ü–µ—Å–æ—Ä: `{platform.processor()}`")
        info.append(f"‚Ä¢ –Ü–º'—è –∫–æ–º–ø'—é—Ç–µ—Ä–∞: `{platform.node()}`")
        info.append("")

        # CPU
        cpu_freq = psutil.cpu_freq()
        info.append("üíª *–ü—Ä–æ—Ü–µ—Å–æ—Ä:*")
        info.append(f"‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `{psutil.cpu_percent()}%`")
        info.append(f"‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: `{cpu_freq.current:.2f}MHz`")
        info.append(f"‚Ä¢ –Ø–¥—Ä–∞: `{psutil.cpu_count()}`")
        info.append("")

        # –ü–∞–º'—è—Ç—å
        memory = psutil.virtual_memory()
        info.append("üìù *–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–º'—è—Ç—å:*")
        info.append(f"‚Ä¢ –í—Å—å–æ–≥–æ: `{get_size(memory.total)}`")
        info.append(f"‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: `{get_size(memory.used)} ({memory.percent}%)`")
        info.append(f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: `{get_size(memory.available)}`")
        info.append("")

        # –î–∏—Å–∫–∏
        info.append("üíæ *–î–∏—Å–∫–∏:*")
        partitions = psutil.disk_partitions()
        for partition in partitions:
            try:
                partition_usage = psutil.disk_usage(partition.mountpoint)
                info.append(f"*–î–∏—Å–∫ {partition.device}:*")
                info.append(f"  ‚Ä¢ –í—Å—å–æ–≥–æ: `{get_size(partition_usage.total)}`")
                info.append(f"  ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: `{get_size(partition_usage.used)} ({partition_usage.percent}%)`")
                info.append(f"  ‚Ä¢ –í—ñ–ª—å–Ω–æ: `{get_size(partition_usage.free)}`")
            except:
                continue
        info.append("")

        # GPU
        try:
            gpus = GPUtil.getGPUs()
            if gpus:
                info.append("üéÆ *–í—ñ–¥–µ–æ–∫–∞—Ä—Ç–∞:*")
                for gpu in gpus:
                    info.append(f"‚Ä¢ –ú–æ–¥–µ–ª—å: `{gpu.name}`")
                    info.append(f"‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `{gpu.load*100:.1f}%`")
                    info.append(f"‚Ä¢ –ü–∞–º'—è—Ç—å: `{gpu.memoryUsed}MB/{gpu.memoryTotal}MB`")
                    info.append(f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: `{gpu.temperature}¬∞C`")
                info.append("")
        except:
            pass

        # –ú–µ—Ä–µ–∂–∞
        network = psutil.net_io_counters()
        info.append("üåê *–ú–µ—Ä–µ–∂–∞:*")
        info.append(f"‚Ä¢ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: `{get_size(network.bytes_sent)}`")
        info.append(f"‚Ä¢ –û—Ç—Ä–∏–º–∞–Ω–æ: `{get_size(network.bytes_recv)}`")
        
        return "\n".join(info)
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó: {str(e)}" 